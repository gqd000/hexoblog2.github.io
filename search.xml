<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python学习笔记（三）</title>
      <link href="/posts/d7a0.html"/>
      <url>/posts/d7a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="python学习笔记（三）"><a href="#python学习笔记（三）" class="headerlink" title="python学习笔记（三）"></a>python学习笔记（三）</h1><blockquote><p>这里我将记录我学习python基础的笔记来记录我的学习</p></blockquote><h2 id="一、条件语句"><a href="#一、条件语句" class="headerlink" title="一、条件语句"></a>一、条件语句</h2><ol><li>if语句<pre class=" language-python"><code class="language-python">is_hot <span class="token operator">=</span> <span class="token boolean">False</span>is_clod <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> is_hot <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's a hot day!"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Drink a lot of water!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> is_clod <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's a cold day!"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Wear warm clothes!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's a lovely day!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enjoy your day!"</span><span class="token punctuation">)</span></code></pre></li><li>if语句的精简<pre class=" language-python"><code class="language-python">guess <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜{}了！"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"对"</span> <span class="token keyword">if</span> guess <span class="token operator">==</span> <span class="token number">99</span> <span class="token keyword">else</span> <span class="token string">"错"</span><span class="token punctuation">)</span></code></pre></li><li>逻辑连词<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 逻辑连词 或、且、非：and、or、not</span>has_high_income <span class="token operator">=</span> <span class="token boolean">True</span>has_good_credit <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> has_good_credit <span class="token operator">and</span> has_high_income<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eligible for loan"</span><span class="token punctuation">)</span><span class="token keyword">if</span> has_good_credit <span class="token operator">or</span> has_high_income<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eligible for loan"</span><span class="token punctuation">)</span><span class="token keyword">if</span> has_good_credit <span class="token operator">and</span> <span class="token operator">not</span> has_high_income<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eligible for loan"</span><span class="token punctuation">)</span></code></pre></li><li>运算符<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 运算符：>、>=、&lt;、&lt;=、==、!=、and、or。</span>temperature <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入温度："</span><span class="token punctuation">)</span><span class="token keyword">if</span> int<span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's a hot day!"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's not a hot day!"</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="二、循环语句"><a href="#二、循环语句" class="headerlink" title="二、循环语句"></a>二、循环语句</h2><ol><li>for语句<pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#逐个字符输出</span> <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#自带换行</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Mosh'</span><span class="token punctuation">,</span><span class="token string">'John'</span><span class="token punctuation">,</span><span class="token string">'Saras'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#逐个字符串输出</span> <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#左闭右开 输出数字</span> <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#左闭右开 输出区间</span> <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#左闭右开 输出数字 间隔2位输出</span> <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出 2 4 6 8</span></code></pre></li><li>while循环<pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span></code></pre></li><li>跳出循环<pre class=" language-python"><code class="language-python"><span class="token keyword">continue</span> <span class="token comment" spellcheck="true"># 打破当前层次循环</span><span class="token keyword">break</span> 推出循环</code></pre></li><li>嵌套循环<pre class=" language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">##  1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> numbers<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x'</span> <span class="token operator">*</span> i<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">## 2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> numbers<span class="token punctuation">:</span> output <span class="token operator">=</span> <span class="token string">""</span> <span class="token keyword">for</span> count <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># i 此时是数字！！！</span>     output <span class="token operator">+=</span> <span class="token string">'x'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span></code></pre></li><li>体重转换实例<pre class=" language-python"><code class="language-python">times <span class="token operator">=</span> int<span class="token punctuation">(</span>input <span class="token punctuation">(</span><span class="token string">"输入你想转换的次数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#循环</span> weight <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的体重："</span><span class="token punctuation">)</span> type_wigeht <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"“g”还是“kg”："</span><span class="token punctuation">)</span> <span class="token keyword">if</span> type_wigeht <span class="token operator">==</span> <span class="token string">'g'</span><span class="token punctuation">:</span>     a <span class="token operator">=</span> int<span class="token punctuation">(</span>weight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"转换后的体重：{a}kg"</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     a <span class="token operator">=</span> int<span class="token punctuation">(</span>weight<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"转换后的体重：{a}g"</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="三、True-和-False-的使用以及循环实例"><a href="#三、True-和-False-的使用以及循环实例" class="headerlink" title="三、True 和 False 的使用以及循环实例"></a>三、True 和 False 的使用以及循环实例</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 开车实例：</span><span class="token keyword">import</span> math<span class="token comment" spellcheck="true"># in_put = input("> ")</span><span class="token comment" spellcheck="true"># in_put = in_put.lower()</span><span class="token comment" spellcheck="true">#in_put = input("> ").lower</span>started <span class="token operator">=</span> <span class="token boolean">False</span>stopped <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    in_put <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> in_put <span class="token operator">==</span> <span class="token string">'help'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''start - to start the carstop - to stop the carquit - to exit        '''</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> in_put <span class="token operator">==</span> <span class="token string">'start'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> started <span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"You have already started the car!what are you dong?"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            started <span class="token operator">=</span> <span class="token boolean">True</span>            stopped <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Car started ......Ready to go!'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> in_put <span class="token operator">==</span> <span class="token string">'stop'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> stopped<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You have already stopped the car!what are you doing?"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            stopped <span class="token operator">=</span> <span class="token boolean">True</span>            started <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Car stopped.'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> in_put <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"I don't understand that ......."</span><span class="token punctuation">)</span></code></pre><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记（二）</title>
      <link href="/posts/dbd9.html"/>
      <url>/posts/dbd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="python学习笔记（二）"><a href="#python学习笔记（二）" class="headerlink" title="python学习笔记（二）"></a>python学习笔记（二）</h1><blockquote><p>这里我将记录我学习python基础的笔记来记录我的学习</p></blockquote><h2 id="一、字符串"><a href="#一、字符串" class="headerlink" title="一、字符串"></a>一、字符串</h2><ol><li>字符串的基本操作<pre class=" language-python"><code class="language-python">course <span class="token operator">=</span> <span class="token string">"Python for Beginners"</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出第一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出最后一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出倒数第二个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出第0到3个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出从1以后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出第5个以前的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出所有</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#左开右闭</span></code></pre></li><li>对字符串大小写的改变<pre class=" language-python"><code class="language-python">course <span class="token operator">=</span> <span class="token string">"Python for Beginners"</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字符串长度</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转换大写的函数,加 “.”有针对不同类型变量的函数，非通用</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转换小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span></code></pre></li><li>字符串中字符的检索<pre class=" language-python"><code class="language-python">course <span class="token operator">=</span> <span class="token string">"Python for Beginners"</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#寻找字符位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Beginners'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#寻找字符串首字母出现位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Beginners'</span><span class="token punctuation">,</span> <span class="token string">'Absolute'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#替换字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>course<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#替换字符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python'</span> <span class="token keyword">in</span> course<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#bool类型输出真假：“Python”是否在字符串中</span></code></pre><blockquote><p>注：在保留字符前加“ \ ”以转义，保证输出原字符</p></blockquote></li><li>控制字符串长度<pre class=" language-python"><code class="language-python">first_name <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"请输入你的名字："</span><span class="token punctuation">)</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>first_name<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first_Name must be at laest 3 characters!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> len<span class="token punctuation">(</span>first_name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first_Name must be a maximum of 10 characters!"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first_Name looks good!"</span><span class="token punctuation">)</span></code></pre></li><li>字符串实例：星座Unicode 编码<pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">9800</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="二、关于time库"><a href="#二、关于time库" class="headerlink" title="二、关于time库"></a>二、关于time库</h2><ol><li>time库<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 时间获取：time() ctime() gmtime()</span><span class="token keyword">import</span> timetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出时间戳  （浮点数）</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出星期、日期等  （字符串）</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出计算机可处理的时间</span></code></pre></li><li>时间格式化 （strftime( ) strpyime( )）<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timet <span class="token operator">=</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></code></pre></li><li>程序计时 （sleep( ) 、perf_counter( )）<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 计数起点不确定，需要用差</span><span class="token comment" spellcheck="true"># (······代码······)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>t <span class="token operator">=</span> end <span class="token operator">-</span> start</code></pre></li><li>程序休眠<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用函数 程序休眠3.3秒</span></code></pre></li><li>time库的使用实例（文本进度条）<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timescale <span class="token operator">=</span> <span class="token number">50</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行开始"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>scale <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> i b <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>scale <span class="token operator">-</span> i<span class="token punctuation">)</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>scale<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span> dur <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r{:^3.0f}%[{}->{}]{:.2f}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> dur<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"执行结束"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="三、输入错误的修正"><a href="#三、输入错误的修正" class="headerlink" title="三、输入错误的修正"></a>三、输入错误的修正</h2><blockquote><p>例：错误修正：（假如输入字符串后会奔溃）<br>age = int(input(“Age: “))<br>print(age)</p></blockquote><ol><li>指定错误类型 （<del>比较麻烦</del>）<pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span> age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Age: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> income <span class="token operator">=</span> <span class="token number">10000</span> risk <span class="token operator">=</span> income <span class="token operator">/</span> age <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>risk<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 除0错误</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Age can not be 0."</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果输入类型不对（只转换类型错误）</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Indvaid value"</span><span class="token punctuation">)</span></code></pre></li><li>不指定错误类型 （<del>不用记错误类型了</del>）<blockquote><p>只要是错误，不管什么类型，都会执行 except 内容</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记（一）</title>
      <link href="/posts/4ba3.html"/>
      <url>/posts/4ba3.html</url>
      
        <content type="html"><![CDATA[<h1 id="python学习笔记（一）"><a href="#python学习笔记（一）" class="headerlink" title="python学习笔记（一）"></a>python学习笔记（一）</h1><blockquote><p>这里我将记录我学习python基础的笔记来记录我的学习</p></blockquote><h2 id="一、输入与输出"><a href="#一、输入与输出" class="headerlink" title="一、输入与输出"></a>一、输入与输出</h2><ol><li>输入与输出<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre></li><li>评估函数和强制转换<pre class=" language-python"><code class="language-python">eval<span class="token punctuation">(</span><span class="token punctuation">)</span> 评估函数：字符串转数字等</code></pre></li></ol><h1 id="二、强制转换"><a href="#二、强制转换" class="headerlink" title="二、强制转换"></a>二、强制转换</h1><pre class=" language-python"><code class="language-python">birth <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"Birth year: "</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">2020</span> <span class="token operator">-</span> int<span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You age: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"You age: {str(a)}"</span><span class="token punctuation">)</span></code></pre><blockquote><p>强制转换实例</p></blockquote><pre class=" language-python"><code class="language-python">weigth <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please write you weight(g): "</span><span class="token punctuation">)</span>kg <span class="token operator">=</span> int<span class="token punctuation">(</span>weigth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That is your weight(kg): "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>kg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>kg<span class="token punctuation">)</span></code></pre><ol start="3"><li>输入提示符和字符串的拼接<pre class=" language-python"><code class="language-python">first_name <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"what is you first_name? "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hi "</span> <span class="token operator">+</span> first_name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字符串连接</span>clour <span class="token operator">=</span> input <span class="token punctuation">(</span><span class="token string">"what is your favourite clour? "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>first_name <span class="token operator">+</span> <span class="token string">" likes "</span> <span class="token operator">+</span> clour<span class="token punctuation">)</span></code></pre></li><li>多行字符串<pre class=" language-python"><code class="language-python">email <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token triple-quoted-string string">'''Hi,josh:This is a letter for you! Thank you!The Team'''</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>email<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 </span><span class="token triple-quoted-string string">''' '''</span>的内容（原格式）</code></pre></li><li>格式化输出<pre class=" language-python"><code class="language-python">first <span class="token operator">=</span> <span class="token string">"John"</span>last  <span class="token operator">=</span> <span class="token string">"Smith"</span>massage <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token string">" ["</span> <span class="token operator">+</span> last <span class="token operator">+</span> <span class="token string">"] is a coder!"</span><span class="token comment" spellcheck="true">#简单句子</span>msg <span class="token operator">=</span> f<span class="token string">"{first} [{last}] is a coder!"</span><span class="token comment" spellcheck="true">#优化：留空</span><span class="token keyword">print</span><span class="token punctuation">(</span>massage<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></code></pre></li><li>输入数据个数不确定时<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shuru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  shuru <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入数据：（回车结束） "</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> shuru <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>       li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>shuru<span class="token punctuation">)</span><span class="token punctuation">)</span>       shuru <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入数据：（回车结束） "</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> li</code></pre></li><li>输入多个值<pre class=" language-python"><code class="language-python">i<span class="token punctuation">,</span>j <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"输入i和j的值（逗号隔开）："</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="二、运算"><a href="#二、运算" class="headerlink" title="二、运算"></a>二、运算</h2><ol><li>运算一<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 浮点数有尾数：0.1 + 0.2 ！= 0.3</span><span class="token comment" spellcheck="true"># 四舍五入：round(x,d) : 对x四舍五入，截取d位小数</span><span class="token comment" spellcheck="true"># 浮点数：4.3e-3  表示0.0043   9.6e5  表示960000.0</span><span class="token comment" spellcheck="true"># 故 round（0.1 + 0.2，1） = 0.3</span><span class="token comment" spellcheck="true"># 复数</span><span class="token comment" spellcheck="true"># z = 1.23e-4+5.6e+89j  表示复数</span><span class="token comment" spellcheck="true"># 获得实部：z.real</span><span class="token comment" spellcheck="true"># 获得虚部：z.imag</span></code></pre></li><li>运算二<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#乘法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#幂：3次方</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开平方 根号10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#除法（带小数）</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#除法（）不带小数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模运算</span></code></pre></li><li>运算三<pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">10</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">3</span>x<span class="token operator">+=</span> <span class="token number">3</span>x<span class="token operator">-=</span> <span class="token number">3</span>x <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">#（=16）优先原则(同C++)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><blockquote><p> 注：<br> print(“转换后{:.2f}F”.format(C))      （{:.2f} 小数点保留2位小数）<br> print(f”{a:.2f}”) # 也是保留2位小数</p></blockquote><h2 id="三、一些数学函数"><a href="#三、一些数学函数" class="headerlink" title="三、一些数学函数"></a>三、一些数学函数</h2><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">2.9</span><span class="token keyword">print</span><span class="token punctuation">(</span>round<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#四舍五入</span>a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">985</span><span class="token keyword">print</span><span class="token punctuation">(</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取绝对值</span><span class="token keyword">print</span><span class="token punctuation">(</span>divmod<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 商余操作 如：divmod(10,3) = (3,1)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token punctuation">,</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 表示 x**y % z</span><span class="token keyword">import</span> math <span class="token comment" spellcheck="true">#引入math函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#向上取整</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#向下取整</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span>函数int<span class="token punctuation">(</span>x<span class="token punctuation">)</span>float<span class="token punctuation">(</span>x<span class="token punctuation">)</span> 转换</code></pre></li></ol><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启新章程</title>
      <link href="/posts/c267.html"/>
      <url>/posts/c267.html</url>
      
        <content type="html"><![CDATA[<h1 id="开启新章程"><a href="#开启新章程" class="headerlink" title="开启新章程"></a>开启新章程</h1><blockquote><p>这几天一直在搞博客，想在<a href="github.com">GitHub</a>上部署，因为GitHub上有免费的空间可以用，当时尝试了许多，包括<a href="https://definithing.com/jeykell/" target="_blank" rel="noopener">jekyll</a>与GitHub配合，<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>与GitHub的配合，但最终选择了hexo，它插件挺多，挺方便的。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p></blockquote><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>偶然间看到一个博客，说拥有一个博客，就相当于在网络上拥有了一个自己的独立空间，可以在这里面写一写自己关于任何方面的有趣的事、想分享到技术、想写出来的文章等。我一想还不赖，于是便产生了搞一个自己的博客的想法。在踩了无数坑、试了几次“毒”之后，终于确定了这个hexo博客和这个主题，有兴趣的小伙伴可以去我的<a href="github.com/gqd000">GitHub</a>上随便看看，有一些我挑选的jekyll和hexo的模板，这儿还有<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo的官方文档</a>，感兴趣的小伙伴也可以去看看。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>这个博客我将主要用来分享一些感觉有趣的东西，可能会包括一些IT类的、还有一些电影推荐（因为本人非常喜欢看电影）、好文章推荐之类的东西。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>这是我第一次写博文，所以可能会有许多的纰漏，多多担待。这里，我是用浏览器上的网页写这篇 MarkDown文章的，对新手小伙伴来说，写MD格式的博文，<a href="https://maxiang.io/" target="_blank" rel="noopener">马克飞象</a>的确是一个不错的选择，它可以实时生成并可以实时预览文章，非常方便。</p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>当然，因为我技术有限、能力也不足，还请“不幸”<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span>看到的小伙伴，多多担待，及时评论指正错误，如果看到消息，我一定改正。还有就是希望看到的小伙伴们在留言区和我多多交流，我们可以以前学习、一起进步！</p><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>后续，我可能会搞一篇用Github和Hexo搭建博客的文章，虽然网上教程很多，但我也遇到了许多问题，我会把我试过的“毒”和踩过的坑介绍给大家，以免感兴趣的小伙伴搭建的时候重蹈覆辙。</p><h3 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h3><p>现在，终于可以删除测试文章了，但是，那篇“Hello World”我相信每个搭建博客的小伙伴都不会删吧，因为它在某种程度上说是我们探索新知识的引领者，它有着很大的纪念意义。但愿我能够一直坚持下去，正借用那个大神的话，将一个小事坚持下来那也挺了不起的。最后，希望我能在这个博客中分享一些优质的的东西，让思维、感情、思想得到升华！</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开博第一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hello world! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
